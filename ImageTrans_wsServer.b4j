AppType=StandardJava
Build1=Default,b4j.example
File1=certificate.jks
File2=index.html
File3=scantranslator.html
File4=settings.html
File5=translator.html
File6=translator.js
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
Group=Default Group
Library1=javaobject
Library2=jcore
Library3=jserver
Library4=json
Library5=jstringutils
Library6=jokhttputils2
Module1=CorsFilter
Module10=ScanTranslatorHandler
Module11=SettingsHandler
Module12=TranslateHandler
Module13=TranslateRegionHandler
Module14=TranslatorHandler
Module15=VersionHandler
Module2=HttpsFilter
Module3=ImageHandler
Module4=ImageTrans
Module5=ImageTransShared
Module6=IndexFilter
Module7=IndexHandler
Module8=ListHandler
Module9=PrivateHeaderFilter
NumberOfFiles=6
NumberOfLibraries=6
NumberOfModules=15
Version=10
@EndOfDesignText@
'Non-UI application (console / server application)
#Region Project Attributes 
	#CommandLineArgs:
	#MergeLibraries: True 
#End Region

Sub Process_Globals
	Public srvr As Server
	Public translation As Map
	Public autoCleanTimer As Timer
End Sub

Sub AppStart (Args() As String)
	srvr.Initialize("srvr")
	translation.Initialize
	Dim jo As JavaObject = srvr
	jo.GetFieldJO("context").RunMethod("setMaxFormContentSize", Array(10*1000*1000))'in bytes
	ImageTransShared.Init
	srvr.Port = 51042
	srvr.StaticFilesFolder = File.DirApp
	If File.Exists(File.DirApp, "tmp") = False Then
		File.MakeDir(File.DirApp, "tmp")
	End If
	srvr.AddWebSocket("/imagetrans", "ImageTrans")
	srvr.AddHandler("/list","ListHandler",False)
	srvr.AddHandler("/translate","TranslateHandler",False)
	srvr.AddHandler("/translator","TranslatorHandler",False)
	srvr.AddHandler("/scantranslator","ScanTranslatorHandler",False)
	srvr.AddHandler("/translateRegion","TranslateRegionHandler",False)
	srvr.AddFilter("/translate","PrivateHeaderFilter",False)
	srvr.AddFilter("/","IndexFilter",False)
	srvr.AddHandler("/index","IndexHandler",False)
	srvr.AddHandler("/version","VersionHandler",False)
	srvr.AddHandler("/settings","SettingsHandler",False)
	srvr.AddHandler("/image","ImageHandler",False)
	ConfigureCORS("/translate", "*", "GET,POST,HEAD,OPTIONS", "X-Requested-With,Content-Type,Accept,Origin")
	ConfigureCORS("/translateRegion", "*", "GET,POST,HEAD,OPTIONS", "X-Requested-With,Content-Type,Accept,Origin")

	File.Copy(File.DirAssets,"scantranslator.html",File.DirApp,"scantranslator.html")
	File.Copy(File.DirAssets,"translator.html",File.DirApp,"translator.html")
	File.Copy(File.DirAssets,"settings.html",File.DirApp,"settings.html")
	File.Copy(File.DirAssets,"translator.js",File.DirApp,"translator.js")
	
	ConfigureSSLAndStart(51043)
	autoCleanTimer.Initialize("autoCleanTimer",24*60*60*1000)
	autoCleanTimer.Enabled = True
	StartMessageLoop
End Sub

Private Sub ConfigureSSLAndStart (SslPort As Int) As ResumableSub
	'example of SSL connector configuration
	If File.Exists(File.DirApp, "certificate.jks") = False Then
		File.Copy(File.DirAssets,"certificate.jks",File.DirApp,"certificate.jks")
	End If
	
	If IsCertificateNotExpired(File.Combine(File.DirApp,"certificate.jks")) = False Then
		Wait For (RedownloadCertificate) complete (result As Object)
	End If
	
	Dim ssl As SslConfiguration
	ssl.Initialize
	ssl.SetKeyStorePath(File.DirApp, "certificate.jks") 'path to keystore file
	ssl.KeyStorePassword = "xulihang"
	ssl.KeyManagerPassword = "xulihang"
	srvr.SetSslConfiguration(ssl, SslPort)
	'srvr.AddFilter("/*","HttpsFilter",False)
	srvr.Start
	Return ""
End Sub

' allowedOrigins = "*" or "http://google.com"
' allowedMethods = "*" or "GET,POST,HEAD"
' allowedHeaders = "*" or "X-Requested-With,Content-Type,Accept,Origin"
Private Sub ConfigureCORS (Path As String, allowedOrigins As String, allowedMethods As String, allowedHeaders As String) 'ignore
	Dim cors As CorsFilter
	cors.Initialize(Path, CreateMap("allowedOrigins": allowedOrigins, _
    "allowedMethods": allowedMethods, _
    "allowedHeaders": allowedHeaders, _
    "allowCredentials": "true", _
    "preflightMaxAge": 1800, _
    "chainPreflight": "true"))
	cors.AddToServer(srvr)
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Private Sub IsCertificateNotExpired(path As String) As Boolean
	Dim keyStoreStatic As JavaObject
	keyStoreStatic.InitializeStatic("java.security.KeyStore")
	Dim ks As JavaObject
	ks = keyStoreStatic.RunMethod("getInstance",Array("JKS"))
	Dim passwordArray As JavaObject
	Dim pwd As Object = "xulihang"
	Dim pwdJO As JavaObject = pwd
	passwordArray = pwdJO.RunMethod("toCharArray",Null)
	Dim f As InputStream = File.OpenInput(path,"")
	ks.RunMethod("load",Array(f, passwordArray))
	Dim aliases As JavaObject = ks.RunMethod("aliases",Null)
	Do While aliases.RunMethod("hasMoreElements",Null)
		Dim alias As String = aliases.RunMethod("nextElement",Null)
		Dim cert As JavaObject = ks.RunMethod("getCertificate",Array(alias))
		Dim expirationDate As JavaObject = cert.RunMethod("getNotAfter",Null)
		Dim expirationTimestamp As Long = expirationDate.RunMethod("getTime",Null)
		If DateTime.Now - expirationTimestamp > 0 Then
			Return False
		End If
	Loop
	Return True
End Sub

Private Sub RedownloadCertificate As ResumableSub
	Log("redownloading")
	Dim job As HttpJob
	job.Initialize("job",Me)
	job.Download("https://blog.xulihang.me/ImageTrans_wsServer/certificate.jks")
	wait for (job) jobDone(job As HttpJob)
	If job.Success Then
		Dim out As OutputStream = File.OpenOutput(File.DirApp,"certificate.jks", False)
		File.Copy2(job.GetInputStream, out)
		out.Close '<------ very important
	Else
		Log(job.ErrorMessage)
	End If
	job.Release
	Return ""
End Sub

Sub AutoCleanTimer_Tick
	translation.Clear
	For Each filename As String In File.ListFiles(File.Combine(File.DirApp,"tmp"))
		File.Delete(File.Combine(File.DirApp,"tmp"), filename)
	Next
End Sub

Public Sub IsLocalNetwork(ip As String) As Boolean
	If File.Exists(File.DirApp,"forceLocalPath") Then
		Return True
	End If
	If ip.StartsWith("127.") Or ip.StartsWith("192.") Or ip.StartsWith("172.") Then
		Return True
	End If
	Return False
End Sub
